local Menu = require("nui.menu")
local event = require("nui.utils.autocmd").event

local menu = Menu({
  position = "50%",
  size = {
    width = 35,
    height = 35,
  },
  border = {
    style = "single",
    text = {
      top = "Choose Ansible Documentation",
      top_align = "center",
    },
  },
  win_options = {
    winhighlight = "Normal:Normal,FloatBorder:Normal",
  },
}, {
  lines = {
    Menu.item("abs_test.txt"),
    Menu.item("add_host_module.txt"),
    Menu.item("advanced_host_list_inventory.txt"),
    Menu.item("all_test.txt"),
    Menu.item("any_test.txt"),
    Menu.item("apt_key_module.txt"),
    Menu.item("apt_module.txt"),
    Menu.item("apt_repository_module.txt"),
    Menu.item("assemble_module.txt"),
    Menu.item("assert_module.txt"),
    Menu.item("async_status_module.txt"),
    Menu.item("auto_inventory.txt"),
    Menu.item("b64decode_filter.txt"),
    Menu.item("b64encode_filter.txt"),
    Menu.item("basename_filter.txt"),
    Menu.item("blockinfile_module.txt"),
    Menu.item("bool_filter.txt"),
    Menu.item("changed_test.txt"),
    Menu.item("checksum_filter.txt"),
    Menu.item("cmd_shell.txt"),
    Menu.item("combinations_filter.txt"),
    Menu.item("combine_filter.txt"),
    Menu.item("command_module.txt"),
    Menu.item("comment_filter.txt"),
    Menu.item("commonpath_filter.txt"),
    Menu.item("complex_data_manipulation.txt"),
    Menu.item("config_lookup.txt"),
    Menu.item("constructed_inventory.txt"),
    Menu.item("contains_test.txt"),
    Menu.item("copy_module.txt"),
    Menu.item("cron_module.txt"),
    Menu.item("csvfile_lookup.txt"),
    Menu.item("deb822_repository_module.txt"),
    Menu.item("debconf_module.txt"),
    Menu.item("debug_module.txt"),
    Menu.item("debug_strategy.txt"),
    Menu.item("default_callback.txt"),
    Menu.item("dict2items_filter.txt"),
    Menu.item("dict_lookup.txt"),
    Menu.item("difference_filter.txt"),
    Menu.item("directory_test.txt"),
    Menu.item("dirname_filter.txt"),
    Menu.item("dnf5_module.txt"),
    Menu.item("dnf_module.txt"),
    Menu.item("dpkg_selections_module.txt"),
    Menu.item("env_lookup.txt"),
    Menu.item("exists_test.txt"),
    Menu.item("expanduser_filter.txt"),
    Menu.item("expandvars_filter.txt"),
    Menu.item("expect_module.txt"),
    Menu.item("extract_filter.txt"),
    Menu.item("failed_test.txt"),
    Menu.item("fail_module.txt"),
    Menu.item("falsy_test.txt"),
    Menu.item("fetch_module.txt"),
    Menu.item("fileglob_filter.txt"),
    Menu.item("fileglob_lookup.txt"),
    Menu.item("file_lookup.txt"),
    Menu.item("file_module.txt"),
    Menu.item("file_test.txt"),
    Menu.item("find_module.txt"),
    Menu.item("finished_test.txt"),
    Menu.item("flatten_filter.txt"),
    Menu.item("free_strategy.txt"),
    Menu.item("from_json_filter.txt"),
    Menu.item("from_yaml_all_filter.txt"),
    Menu.item("from_yaml_filter.txt"),
    Menu.item("gather_facts_module.txt"),
    Menu.item("generator_inventory.txt"),
    Menu.item("getent_module.txt"),
    Menu.item("get_url_module.txt"),
    Menu.item("git_module.txt"),
    Menu.item("group_by_module.txt"),
    Menu.item("group_module.txt"),
    Menu.item("guide_rolling_upgrade.txt"),
    Menu.item("hash_filter.txt"),
    Menu.item("host_group_vars_vars.txt"),
    Menu.item("host_list_inventory.txt"),
    Menu.item("hostname_module.txt"),
    Menu.item("host_pinned_strategy.txt"),
    Menu.item("human_readable_filter.txt"),
    Menu.item("human_to_bytes_filter.txt"),
    Menu.item("import_playbook_module.txt"),
    Menu.item("import_role_module.txt"),
    Menu.item("import_tasks_module.txt"),
    Menu.item("include_module.txt"),
    Menu.item("include_role_module.txt"),
    Menu.item("include_tasks_module.txt"),
    Menu.item("include_vars_module.txt"),
    Menu.item("indexed_items_lookup.txt"),
    Menu.item("index.txt"),
    Menu.item("ini_inventory.txt"),
    Menu.item("ini_lookup.txt"),
    Menu.item("intersect_filter.txt"),
    Menu.item("inventory_hostnames_lookup.txt"),
    Menu.item("iptables_module.txt"),
    Menu.item("items2dict_filter.txt"),
    Menu.item("items_lookup.txt"),
    Menu.item("jsonfile_cache.txt"),
    Menu.item("junit_callback.txt"),
    Menu.item("known_hosts_module.txt"),
    Menu.item("linear_strategy.txt"),
    Menu.item("lineinfile_module.txt"),
    Menu.item("lines_lookup.txt"),
    Menu.item("link_exists_test.txt"),
    Menu.item("link_test.txt"),
    Menu.item("list_lookup.txt"),
    Menu.item("local_connection.txt"),
    Menu.item("log_filter.txt"),
    Menu.item("mandatory_filter.txt"),
    Menu.item("match_test.txt"),
    Menu.item("md5_filter.txt"),
    Menu.item("memory_cache.txt"),
    Menu.item("meta_module.txt"),
    Menu.item("minimal_callback.txt"),
    Menu.item("mount_test.txt"),
    Menu.item("nan_test.txt"),
    Menu.item("nested_lookup.txt"),
    Menu.item("normpath_filter.txt"),
    Menu.item("oneline_callback.txt"),
    Menu.item("package_facts_module.txt"),
    Menu.item("package_module.txt"),
    Menu.item("paramiko_ssh_connection.txt"),
    Menu.item("password_hash_filter.txt"),
    Menu.item("password_lookup.txt"),
    Menu.item("path_join_filter.txt"),
    Menu.item("pause_module.txt"),
    Menu.item("permutations_filter.txt"),
    Menu.item("ping_module.txt"),
    Menu.item("pipe_lookup.txt"),
    Menu.item("pip_module.txt"),
    Menu.item("playbook_pathing.txt"),
    Menu.item("playbooks_advanced_syntax.txt"),
    Menu.item("playbooks_async.txt"),
    Menu.item("playbooks_blocks.txt"),
    Menu.item("playbooks_checkmode.txt"),
    Menu.item("playbooks_conditionals.txt"),
    Menu.item("playbooks_debugger.txt"),
    Menu.item("playbooks_delegation.txt"),
    Menu.item("playbooks_environment.txt"),
    Menu.item("playbooks_error_handling.txt"),
    Menu.item("playbooks_execution.txt"),
    Menu.item("playbooks_filters.txt"),
    Menu.item("playbooks_handlers.txt"),
    Menu.item("playbooks_intro.txt"),
    Menu.item("playbooks_lookups.txt"),
    Menu.item("playbooks_loops.txt"),
    Menu.item("playbooks_module_defaults.txt"),
    Menu.item("playbooks_privilege_escalation.txt"),
    Menu.item("playbooks_prompts.txt"),
    Menu.item("playbooks_python_version.txt"),
    Menu.item("playbooks_reuse_roles.txt"),
    Menu.item("playbooks_reuse.txt"),
    Menu.item("playbooks_special_topics.txt"),
    Menu.item("playbooks_startnstep.txt"),
    Menu.item("playbooks_strategies.txt"),
    Menu.item("playbooks_tags.txt"),
    Menu.item("playbooks_templating_now.txt"),
    Menu.item("playbooks_templating.txt"),
    Menu.item("playbooks_tests.txt"),
    Menu.item("playbooks.txt"),
    Menu.item("playbooks_variables.txt"),
    Menu.item("playbooks_vars_facts.txt"),
    Menu.item("powershell_shell.txt"),
    Menu.item("pow_filter.txt"),
    Menu.item("product_filter.txt"),
    Menu.item("psrp_connection.txt"),
    Menu.item("quote_filter.txt"),
    Menu.item("random_choice_lookup.txt"),
    Menu.item("random_filter.txt"),
    Menu.item("raw_module.txt"),
    Menu.item("reachable_test.txt"),
    Menu.item("realpath_filter.txt"),
    Menu.item("reboot_module.txt"),
    Menu.item("regex_escape_filter.txt"),
    Menu.item("regex_findall_filter.txt"),
    Menu.item("regex_replace_filter.txt"),
    Menu.item("regex_search_filter.txt"),
    Menu.item("regex_test.txt"),
    Menu.item("rekey_on_member_filter.txt"),
    Menu.item("relpath_filter.txt"),
    Menu.item("replace_module.txt"),
    Menu.item("root_filter.txt"),
    Menu.item("rpm_key_module.txt"),
    Menu.item("runas_become.txt"),
    Menu.item("same_file_test.txt"),
    Menu.item("script_inventory.txt"),
    Menu.item("script_module.txt"),
    Menu.item("search_test.txt"),
    Menu.item("sequence_lookup.txt"),
    Menu.item("service_facts_module.txt"),
    Menu.item("service_module.txt"),
    Menu.item("set_fact_module.txt"),
    Menu.item("set_stats_module.txt"),
    Menu.item("setup_module.txt"),
    Menu.item("sha1_filter.txt"),
    Menu.item("shell_module.txt"),
    Menu.item("sh_shell.txt"),
    Menu.item("shuffle_filter.txt"),
    Menu.item("skipped_test.txt"),
    Menu.item("slurp_module.txt"),
    Menu.item("splitext_filter.txt"),
    Menu.item("split_filter.txt"),
    Menu.item("ssh_connection.txt"),
    Menu.item("started_test.txt"),
    Menu.item("stat_module.txt"),
    Menu.item("strftime_filter.txt"),
    Menu.item("su_become.txt"),
    Menu.item("subelements_filter.txt"),
    Menu.item("subelements_lookup.txt"),
    Menu.item("subset_test.txt"),
    Menu.item("subversion_module.txt"),
    Menu.item("success_test.txt"),
    Menu.item("sudo_become.txt"),
    Menu.item("superset_test.txt"),
    Menu.item("symmetric_difference_filter.txt"),
    Menu.item("systemd_module.txt"),
    Menu.item("systemd_service_module.txt"),
    Menu.item("sysvinit_module.txt"),
    Menu.item("tempfile_module.txt"),
    Menu.item("template_lookup.txt"),
    Menu.item("template_module.txt"),
    Menu.item("ternary_filter.txt"),
    Menu.item("to_datetime_filter.txt"),
    Menu.item("together_lookup.txt"),
    Menu.item("to_json_filter.txt"),
    Menu.item("toml_inventory.txt"),
    Menu.item("to_nice_json_filter.txt"),
    Menu.item("to_nice_yaml_filter.txt"),
    Menu.item("to_uuid_filter.txt"),
    Menu.item("to_yaml_filter.txt"),
    Menu.item("tree_callback.txt"),
    Menu.item("truthy_test.txt"),
    Menu.item("type_debug_filter.txt"),
    Menu.item("unarchive_module.txt"),
    Menu.item("union_filter.txt"),
    Menu.item("unique_filter.txt"),
    Menu.item("unreachable_test.txt"),
    Menu.item("unvault_filter.txt"),
    Menu.item("unvault_lookup.txt"),
    Menu.item("uri_module.txt"),
    Menu.item("uri_test.txt"),
    Menu.item("url_lookup.txt"),
    Menu.item("urlsplit_filter.txt"),
    Menu.item("url_test.txt"),
    Menu.item("urn_test.txt"),
    Menu.item("user_module.txt"),
    Menu.item("validate_argument_spec_module.txt"),
    Menu.item("varnames_lookup.txt"),
    Menu.item("vars_lookup.txt"),
    Menu.item("vault_encrypted_test.txt"),
    Menu.item("vault_filter.txt"),
    Menu.item("version_test.txt"),
    Menu.item("wait_for_connection_module.txt"),
    Menu.item("wait_for_module.txt"),
    Menu.item("win_basename_filter.txt"),
    Menu.item("win_dirname_filter.txt"),
    Menu.item("winrm_connection.txt"),
    Menu.item("win_splitdrive_filter.txt"),
    Menu.item("yaml_inventory.txt"),
    Menu.item("yum_module.txt"),
    Menu.item("yum_repository_module.txt"),
    Menu.item("zip_filter.txt"),
    Menu.item("zip_longest_filter.txt"),
  },
  max_width = 20,
  keymap = {
    focus_next = { "j", "<Down>", "<Tab>" },
    focus_prev = { "k", "<Up>", "<S-Tab>" },
    close = { "<Esc>", "<C-c>" },
    submit = { "<CR>", "<Space>" },
  },
  on_close = function()
    print("Menu Closed!")
  end,
  on_submit = function(item)
    print("Menu Submitted: ", item.text)
    Display_file(item.text)
  end,
})
Menu.item('test')
-- mount the component
menu:mount()

function Display_file(doc_file)
  local Popup = require("nui.popup")
  local event = require("nui.utils.autocmd").event

  local popup = Popup({
    enter = true,
    focusable = true,
    border = {
      style = "rounded",
      text = {
        top = "Ansible Docs",
        top_align = "center",
      },
    },
    position = "50%",
    size = {
      width = "50%",
      height = "80%",
    },
  })

  -- mount/open the component
  popup:mount()

  -- unmount component when cursor leaves buffer

  popup:map("n", "<esc>", function(bufnr)
    popup:unmount()
  end, { noremap = true })


  -- set content
  local home = os.getenv( "HOME" )
  print(home .. "/.config/nvim/lua/custom/files/base-text/" .. doc_file)
  local rfile = assert(io.open(home .. "/.config/nvim/lua/custom/files/ansibledocs/" .. doc_file, "r"))

  for line in rfile:lines() do
    vim.api.nvim_buf_set_lines(popup.bufnr, -1, -1, false, {line})
  end
end
